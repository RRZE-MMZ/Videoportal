<?php

use App\Enums\Role;
use App\Livewire\UserDataTable;
use App\Mail\EmailUserPassword;
use App\Models\Presenter;
use App\Models\User;
use Facades\Tests\Setup\ClipFactory;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Notification;
use Livewire\Livewire;
use Tests\Setup\WorksWithOpencastClient;

use function Pest\Laravel\assertDatabaseHas;
use function Pest\Laravel\delete;
use function Pest\Laravel\followingRedirects;
use function Pest\Laravel\get;
use function Pest\Laravel\patch;
use function Pest\Laravel\post;

uses(WithFaker::class);
uses(WorksWithOpencastClient::class);
uses()->group('backend');

beforeEach(function () {
    // TODO: Change the autogenerated stub
    signInRole(Role::ADMIN);
});

test('a moderator is not allowed to view users index page', function () {
    auth()->logout();
    get(route('users.index'))->assertRedirect(route('login'));

    signInRole(Role::MODERATOR);
    get(route('users.index'))->assertForbidden();
});

it('renders a datatable for users with admin role', function () {
    signInRole(Role::ADMIN);

    get(route('users.index'))->assertOk();
});

it('renders a datatable for users with superadmin role', function () {
    signInRole(Role::SUPERADMIN);

    get(route('users.index'))->assertOk();
});

it('contains user data table livewire component on index page', function () {
    signInRole(Role::ADMIN);

    get(route('users.index'))->assertSeeLivewire('user-data-table');
});

it('has an admin checkbox in index users data table that filters admins', function () {
    $moderator = signInRole(Role::MODERATOR);
    $admin = signInRole(Role::ADMIN);
    $superadmin = signInRole(Role::SUPERADMIN);

    Livewire::test(UserDataTable::class)
        ->assertSee($admin->username)
        ->assertSee($moderator->usernaitme)
        ->set('admin', true)
        ->assertSee($admin->username)
        ->assertSee($superadmin->username)
        ->assertDontSee($moderator->username);
});

it('can search for user name in index users data table', function () {
    [$bob, $alice] = User::factory(2)->create();

    Livewire::test(UserDataTable::class)
        ->set('search', $bob->first_name)
        ->assertSee($bob->username)
        ->assertDontSee($alice->username);
});

it('can search for user email in index users data table', function () {
    [$bob, $alice] = User::factory(2)->create();

    Livewire::test(UserDataTable::class)
        ->set('search', $bob->email)
        ->assertSee($bob->username)
        ->assertDontSee($alice->username);
});

it('can sorts by user name ascending in index users data table', function () {
    $bob = User::factory()->create([
        'first_name' => 'Bob',
        'last_name' => 'Tester',
        'username' => 'bob01',
    ]);
    $alice = User::factory()->create([
        'first_name' => 'Alice',
        'last_name' => 'Tester',
        'username' => 'alice01',
    ]);
    $gregor = User::factory()->create([
        'first_name' => 'Gregor',
        'last_name' => 'Tester',
        'username' => 'gregor01',
    ]);

    Livewire::test(UserDataTable::class)
        ->call('sortBy', 'username')
        ->assertSeeInOrder([$alice->username, $bob->username, $gregor->username]);
});

it('can sorts by user name descending in index users data table', function () {
    $bob = User::factory()->create([
        'first_name' => 'Bob',
        'last_name' => 'Tester',
        'username' => 'bob01',
    ]);
    $alice = User::factory()->create([
        'first_name' => 'Alice',
        'last_name' => 'Tester',
        'username' => 'alice01',
    ]);
    $gregor = User::factory()->create([
        'first_name' => 'Gregor',
        'last_name' => 'Tester',
        'username' => 'gregor01',
    ]);

    Livewire::test(UserDataTable::class)
        ->call('sortBy', 'username')
        ->call('sortBy', 'username')
        ->assertSeeInOrder([$gregor->username, $bob->username, $alice->username]);
});

it('can sorts by user email ascending in index users data table', function () {
    $bob = User::factory()->create(['email' => 'bob@example.org']);
    $alice = User::factory()->create(['email' => 'alice@example.org']);
    $gregor = User::factory()->create(['email' => 'gregor@example.org']);

    Livewire::test(UserDataTable::class)
        ->call('sortBy', 'email')
        ->assertSeeInOrder([$alice->username, $bob->username, $gregor->username]);
});

it('can sorts by user email descending in index users data table', function () {
    $bob = User::factory()->create(['email' => 'bob@example.org']);
    $alice = User::factory()->create(['email' => 'alice@example.org']);
    $gregor = User::factory()->create(['email' => 'gregor@example.org']);

    Livewire::test(UserDataTable::class)
        ->call('sortBy', 'email')
        ->call('sortBy', 'email')
        ->assertSeeInOrder([$gregor->username, $bob->username, $alice->username]);
});

test('a moderator is not allowed to view user create form', function () {
    auth()->logout();
    get(route('users.create'))->assertRedirect(route('login'));

    signInRole(Role::MODERATOR);
    get(route('users.create'))->assertForbidden();
});

test('an admin user see create a new local user form', function () {
    get(route('users.create'))
        ->assertSee('first_name')
        ->assertSee('last_name')
        ->assertSee('email');
});

it('requires a first name for creating a new user', function () {
    post(route('users.store'), ['first_name' => ''])
        ->assertSessionHasErrors('first_name');

    post(route('users.store'), ['first_name' => '12'])
        ->assertSessionHasErrors('first_name');

    post(route('users.store'), ['first_name' => $this->faker->firstName()])
        ->assertSessionDoesntHaveErrors('first_name');
});

it('requires a last name for creating a new user', function () {
    post(route('users.store'), ['last_name' => ''])
        ->assertSessionHasErrors('last_name');

    post(route('users.store'), ['last_name' => '12'])
        ->assertSessionHasErrors('last_name');

    post(route('users.store'), ['last_name' => 'Doe'])
        ->assertSessionDoesntHaveErrors('last_name');
});

it('has a button to enable user channel if user has a moderator role', function () {
    $moderator = User::factory()->create();
    $moderator->assignRole(Role::MODERATOR);

    get(route('users.edit', $moderator))
        ->assertSee('Enable user channel')
        ->assertSee(route('channels.activate'));
});

it('it hides the option to enable user channel if user is not a moderator', function () {
    $student = User::factory()->create();

    get(route('users.edit', $student))
        ->assertDontSee('Enable user channel')
        ->assertDontSee(route('channels.create'));
});

it('requires a unique and valid email for creating new user', function () {
    post(route('users.store'), ['email' => 'test'])
        ->assertSessionHasErrors('email');

    post(route('users.store'), ['email' => auth()->user()->email])
        ->assertSessionHasErrors('email');

    post(route('users.store'), ['email' => $this->faker->email()])
        ->assertSessionDoesntHaveErrors('email');
});

test('create user form should remember old values on validation error', function () {
    $attributes = [
        'first_name' => $this->faker->firstName(),
        'last_name' => $this->faker->lastName(),
        'email' => auth()->user()->email,
    ];

    post(route('users.store'), $attributes);

    followingRedirects();

    get(route('users.create'))->assertSee($attributes);
});

test('a moderator is not allowed to create a user', function () {
    auth()->logout();
    post(route('users.store'), [])->assertRedirect(route('login'));

    signInRole(Role::MODERATOR);
    get(route('users.store'), [])->assertForbidden();
});

test('an admin can create a new user', function () {
    $attributes = [
        'first_name' => 'John',
        'last_name' => 'Doe',
        'username' => 'local.test12',
        'email' => 'john@doe.com',
    ];

    post(route('users.store'), $attributes)->assertStatus(302);
    assertDatabaseHas('users', ['username' => $attributes['username']]);
});

test('after creation user will be notified via email', function () {
    Notification::fake();
    $attributes = [
        'first_name' => 'John',
        'last_name' => 'Doe',
        'username' => 'local.test12',
        'email' => 'john@doe.com',
    ];
    post(route('users.store'), $attributes);

    Notification::assertNotSentTo([User::find(2)], EmailUserPassword::class);
});

test('a moderator is not allowed to view user edit form', function () {
    $user = User::factory()->create();
    auth()->logout();

    get(route('users.edit', $user))->assertRedirect(route('login'));

    signInRole(Role::MODERATOR);
    get(route('users.edit', $user))->assertForbidden();
});

test('admin user can view edit user form', function () {
    $user = User::factory()->create();

    get(route('users.edit', $user))
        ->assertOk()
        ->assertSee('first_name')
        ->assertSee('last_name')
        ->assertSee('email')
        ->assertSee('roles');
});

it('shows a users presenter association if exists', function () {
    $user = User::factory()->create();
    $presenter = Presenter::factory()->create();
    $user->presenter_id = $presenter->id;
    $user->save();
    $user->refresh();
    $user->assignRole(Role::MEMBER);

    signInRole(Role::ADMIN);

    get(route('users.edit', $user))->assertSee($presenter->getFullNameAttribute());
});

it('shows a users channel information', function () {
    $user = User::factory()->create();
    $user->assignRole(Role::MODERATOR);
    $attributes = ['username' => $user->username];
    signInRole(Role::SUPERADMIN);

    followingRedirects()->post(route('channels.activate'), $attributes)
        ->assertSee(route('channels.edit', $user->channels()->first()));

});

test('a moderator is not allowed to update user information', function () {
    $user = User::factory()->create();
    auth()->logout();

    patch(route('users.update', $user), [])->assertRedirect(route('login'));

    signInRole(Role::MODERATOR);
    patch(route('users.update', $user), [])->assertForbidden();
});

test('admin user can update user information', function () {
    $user = User::factory()->create();
    patch(route('users.update', $user), [
        'first_name' => 'John',
        'last_name' => 'Doe',
        'email' => $user->email,
    ]);

    $user->refresh();

    assertDatabaseHas('users', [
        'first_name' => 'John',
        'last_name' => 'Doe',
        'email' => $user->email,
    ]);
});

test('a moderator is not allowed to delete a user', function () {
    $user = User::factory()->create();
    auth()->logout();

    delete(route('users.destroy', $user))->assertRedirect(route('login'));

    signInRole(Role::MODERATOR);
    delete(route('users.destroy', $user))->assertForbidden();
});

test('an admin user can delete a user', function () {
    $user = User::factory()->create();
    delete(route('users.destroy', $user));

    // exclude soft deletes
    $this->assertDatabaseMissing('users', ['id' => $user->id, 'delete_at' => null]);
});

test('a web sso cannot be deleted via the UsersController', function () {
    $user = User::factory()->create(['login_type' => 'sso']);
    delete(route('users.destroy', $user))->assertForbidden();

    assertDatabaseHas('users', ['id' => $user->id, 'deleted_at' => null]);
});

test('an admin can update user role', function () {
    $user = User::factory()->create();

    signInRole(Role::ADMIN);
    patch((route('users.update', $user)), [
        'roles' => [0 => Role::MODERATOR()],
    ]);

    expect($user->isModerator())->toBeTrue();
});

it('updates clip supervisor id if a portal admin creats a clip', function () {
    $clip = ClipFactory::ownedBy(signInRole(Role::ADMIN))->create();

    expect($clip->supervisor_id)->not->toBeNull();
});

it('updates clip supervisor id if a portal admin updates a clip', function () {
    $clip = ClipFactory::ownedBy(signInRole(Role::MODERATOR))->create();

    expect($clip->supervisor_id)->toBeNull();

    auth()->logout();
    signInRole(Role::ADMIN);
    patch(route('clips.update', $clip), [
        'episode' => '1',
        'title' => 'changed',
        'description' => 'changed',
        'recording_date' => now(),
        'organization_id' => '1',
        'language_id' => '1',
        'context_id' => '1',
        'format_id' => '1',
        'type_id' => '1',
        'semester_id' => '1',
    ]);
    $clip->refresh();

    expect($clip->supervisor_id)->not->toBeNull();
});

afterEach(function () {
    // TODO: Change the autogenerated stub
});
