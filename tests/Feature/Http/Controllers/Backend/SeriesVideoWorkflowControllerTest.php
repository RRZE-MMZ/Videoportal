<?php

use App\Enums\Acl;
use App\Enums\OpencastWorkflowState;
use App\Enums\Role;
use App\Models\User;
use App\Services\OpencastService;
use Facades\Tests\Setup\SeriesFactory;
use Illuminate\Support\Str;
use Tests\Setup\WorksWithOpencastClient;

use function Pest\Laravel\assertDatabaseHas;
use function Pest\Laravel\get;
use function Pest\Laravel\post;
use function Pest\Laravel\put;
use function Pest\Laravel\withoutExceptionHandling;
use function PHPUnit\Framework\assertNotSame;

uses(WorksWithOpencastClient::class);

beforeEach(function () {
    // TODO: Change the autogenerated stub
    $this->mockHandler = $this->swapOpencastClient();
    $this->opencastService = app(OpencastService::class);
    $this->series = SeriesFactory::withOpencastID()->create();
});

it('shows certain opencast actions to moderator', function () {

    $this->series->owner_id = signInRole(Role::MODERATOR)->id;
    $this->series->save();
    $this->mockHandler->append(
        $this->mockHealthResponse(), // health
        $this->mockSeriesMetadata($this->series),
        $this->mockgetSeriesTheme(), // Themes response
        $this->mockNoResultsResponse(), // recording
        $this->mockNoResultsResponse(), // running
        $this->mockNoResultsResponse(), // scheduled
        $this->mockNoResultsResponse(), // failed
        $this->mockNoTrimmingResultsResponse(), // trimming
        $this->mockNoResultsResponse(), // upcoming
        $this->mockCreateSeriesResponse(),
    );
    get(route('series.edit', $this->series))
        ->assertDontSeeHtml('id="opencast-metadata"')
        ->assertDontSeeHtml('id="opencast-series-actions"')
        ->assertDontSeeHtml('id="opencast-editors"')
        ->assertDontSeeHtml('id="opencast-create-series-button"')
        ->assertSeeHtml('id="opencast-theme-actions"');
});

it('shows all opencast actions for portal admins', function () {
    signInRole(Role::ASSISTANT);
    $this->mockHandler->append(
        $this->mockHealthResponse(), // health
        $this->mockSeriesMetadata($this->series),
        $this->mockgetSeriesTheme(), // Themes response
        $this->mockNoResultsResponse(), // recording
        $this->mockNoResultsResponse(), // running
        $this->mockNoResultsResponse(), // scheduled
        $this->mockNoResultsResponse(), // failed
        $this->mockNoTrimmingResultsResponse(), // trimming
        $this->mockEventResponse($this->series, OpencastWorkflowState::SCHEDULED), // upcoming
        $this->mockCreateSeriesResponse(),
    );
    get(route('series.edit', $this->series))
        ->assertSeeHtml('id="opencast-metadata"')
        ->assertSeeHtml('id="opencast-series-actions"')
        ->assertSeeHtml('id="opencast-editors"')
        ->assertSeeHtml('id="opencast-theme-actions"');
});

it('allows create opencast series only for portal admins', function () {
    auth()->logout();

    post(route('series.opencast.createSeries', $this->series))->assertRedirectToRoute('login');

    signInRole(Role::MODERATOR);
    post(route('series.opencast.createSeries', $this->series))->assertForbidden();

    auth()->logout();
    $ownedSeries = SeriesFactory::ownedBy(signInRole(Role::MODERATOR))->create();

    post(route('series.opencast.createSeries', $ownedSeries))->assertForbidden();
    auth()->logout();

    signInRole(Role::ADMIN);
    $this->mockHandler->append(
        $this->mockHealthResponse(), // health
        $this->mockNoResultsResponse(), // seriesInfo
        $this->mockNoResultsResponse(), // seriesTheme
        $this->mockNoResultsResponse(), // recording
        $this->mockNoResultsResponse(), // running
        $this->mockNoResultsResponse(), // scheduled
        $this->mockNoResultsResponse(), // failed
        $this->mockNoTrimmingResultsResponse(), // trimming
        $this->mockNoResultsResponse(), // upcoming
        $this->mockCreateSeriesResponse(),
    );

    post(route('series.opencast.createSeries', $ownedSeries))->assertRedirect();
});

it('updates opencast series id for the given series', function () {
    $oldSeriesId = $this->series->opencast_series_id;

    signInRole(Role::ADMIN);

    $this->mockHandler->append(
        $this->mockHealthResponse(), // health
        $this->mockNoResultsResponse(), // seriesInfo
        $this->mockNoResultsResponse(), // seriesTheme
        $this->mockNoResultsResponse(), // recording
        $this->mockNoResultsResponse(), // running
        $this->mockNoResultsResponse(), // scheduled
        $this->mockNoResultsResponse(), // failed
        $this->mockNoTrimmingResultsResponse(), // trimming
        $this->mockNoResultsResponse(), // upcoming
        $this->mockCreateSeriesResponse(),
    );
    post(route('series.opencast.createSeries', $this->series));
    $this->series->refresh();
    assertNotSame($oldSeriesId, $this->series->opencast_series_id);
});

it('does not update an opencast series acl if series has a running workflow', function () {
    $this->mockHandler->append(
        $this->mockHealthResponse(), // health
        $this->mockNoResultsResponse(), // seriesInfo
        $this->mockNoResultsResponse(), // seriesTheme
        $this->mockNoResultsResponse(), // recording
        $this->mockEventResponse($this->series, OpencastWorkflowState::RUNNING), // running
        $this->mockNoResultsResponse(), // scheduled
        $this->mockNoResultsResponse(), // failed
        $this->mockNoTrimmingResultsResponse(), // trimming
        $this->mockNoResultsResponse(), // upcoming
        $this->mockCreateSeriesResponse(),
    );
    signInRole(Role::ADMIN);

    post(route('series.opencast.updateSeriesAcl', $this->series), [
        'opencastSeriesID' => $this->series->opencast_series_id])->assertSessionHas(
            'flashMessage',
            'Opencast workflows running in this series. Try again later',
        );
});

it('shows a forbidden page for updating opencast acl for users other than admin and superadmin', function () {
    auth()->logout();
    signInRole(Role::MODERATOR);

    post(route('series.opencast.updateSeriesAcl', $this->series))->assertForbidden();

    auth()->logout();
    signInRole(Role::ASSISTANT);

    post(route('series.opencast.updateSeriesAcl', $this->series))->assertForbidden();
});

test('it validates opencast update acl form data for a series', function () {
    $this->mockHandler->append(
        $this->mockHealthResponse(), // health
        $this->mockNoResultsResponse(), // seriesInfo
        $this->mockNoResultsResponse(), // seriesTheme
        $this->mockNoResultsResponse(), // recording
        $this->mockNoResultsResponse(), // running
        $this->mockNoResultsResponse(), // scheduled
        $this->mockNoResultsResponse(), // failed
        $this->mockNoTrimmingResultsResponse(), // trimming
        $this->mockNoResultsResponse(), // upcoming
        $this->mockCreateSeriesResponse(),
    );

    signInRole(Role::ADMIN);
    post(route('series.opencast.updateSeriesAcl', $this->series), [])
        ->assertSessionHasErrors();
});

it('updates opencast series acl for a specific series', function () {
    $this->mockHandler->append(
        $this->mockHealthResponse(), // health
        $this->mockSeriesMetadata($this->series), // seriesInfo
        $this->mockgetSeriesTheme(), // Themes response
        $this->mockNoResultsResponse(), // recording
        $this->mockNoResultsResponse(), // running
        $this->mockNoResultsResponse(), // scheduled
        $this->mockNoResultsResponse(), // failed
        $this->mockNoTrimmingResultsResponse(), // trimming
        $this->mockNoResultsResponse(), // upcoming
        $this->mockUpdateAclResponse()
    );

    signInRole(Role::ADMIN);
    post(route('series.opencast.updateSeriesAcl', $this->series), [
        'opencastSeriesID' => $this->series->opencast_series_id,
        'username' => User::factory()->create()->username,
        'action' => 'addUser'])->assertSessionHas(
            'flashMessage',
            'Opencast acls updated successfully',
        );
});

it('does not update the acl if server is not available', function () {
    $this->mockHandler->append(
        $this->mockHealthResponse(), // health
        $this->mockSeriesMetadata($this->series), // seriesInfo
        $this->mockgetSeriesTheme(), // Themes response
        $this->mockNoResultsResponse(), // recording
        $this->mockNoResultsResponse(), // running
        $this->mockNoResultsResponse(), // scheduled
        $this->mockNoResultsResponse(), // failed
        $this->mockNoTrimmingResultsResponse(), // trimming
        $this->mockNoResultsResponse(), // upcoming
        $this->mockServerNotAvailable()
    );

    signInRole(Role::ADMIN);
    post(route('series.opencast.updateSeriesAcl', $this->series), [
        'opencastSeriesID' => $this->series->opencast_series_id,
        'username' => User::factory()->create()->username,
        'action' => 'addUser'])->assertSessionHas(
            'flashMessage',
            'There was a problem updating Opencast Acls',
        );
});

it('requires an opencast series uuid to update series title in opencast ', function () {
    $this->signInRole(Role::SUPERADMIN);

    post(route('series.opencast.updateEventsTitle', $this->series))->assertSessionHasErrors();

    post(route('series.opencast.updateEventsTitle', $this->series), ['opencastSeriesID' => Str::uuid()])
        ->assertSessionHasErrors();

    post(route('series.opencast.updateEventsTitle', $this->series), [
        'opencastSeriesID' => $this->series->opencast_series_id,
    ])->assertSessionDoesntHaveErrors();
});

it('can update events title based on series title and remove any ascending numbers', function () {
    $this->mockHandler->append(
        $this->mockEventResponse($this->series, OpencastWorkflowState::SCHEDULED),
        $this->mockNoResultsResponse(),
    );
    $this->signInRole(Role::SUPERADMIN);
    post(route('series.opencast.updateEventsTitle', $this->series), [
        'opencastSeriesID' => $this->series->opencast_series_id,
    ])->assertSessionHas(
        'flashMessage',
        '1 Opencast events updated successfully',
    );
});

it('validates add scheduled events as clips form data', function () {
    $this->mockHandler->append(
        $this->mockEventResponse($this->series, OpencastWorkflowState::SCHEDULED),
    );
    $this->signInRole(Role::SUPERADMIN);
    post(route('series.opencast.addScheduledEventsAsClips', $this->series), [])->assertSessionHasErrors();
});

it('adds scheduled events as clips for a specific series', function () {
    withoutExceptionHandling();
    $event_identifier = Str::uuid();
    $this->mockHandler->append(
        $this->mockEventResponse($this->series, OpencastWorkflowState::SCHEDULED, 2, $event_identifier),
    );
    $this->signInRole(Role::SUPERADMIN);

    expect($this->series->clips->count())->toBe(0);

    post(route('series.opencast.addScheduledEventsAsClips', $this->series), [
        'opencastSeriesID' => $this->series->opencast_series_id]);
    $this->series->refresh();

    expect($this->series->clips->count())->toBe(1);
    assertDatabaseHas('clips', ['opencast_event_id' => $event_identifier]);
});

it('clips from scheduled events would have an lms acl if series has an lms link', function () {
    $this->mockHandler->append(
        $this->mockEventResponse($this->series, OpencastWorkflowState::SCHEDULED),
    );
    $this->series->lms_link = 'https://lms.localhost';
    $this->series->save();
    $this->signInRole(Role::SUPERADMIN);
    post(route('series.opencast.addScheduledEventsAsClips', $this->series), [
        'opencastSeriesID' => $this->series->opencast_series_id]);
    $this->series->refresh();

    expect($this->series->clips()->first()->acls()->first()->id)->toBe(Acl::LMS());
});

it('clips from scheduled events would have a portal acl if series has no lms link', function () {
    $this->mockHandler->append(
        $this->mockEventResponse($this->series, OpencastWorkflowState::SCHEDULED),
    );
    $this->signInRole(Role::SUPERADMIN);
    post(route('series.opencast.addScheduledEventsAsClips', $this->series), [
        'opencastSeriesID' => $this->series->opencast_series_id]);
    $this->series->refresh();

    expect($this->series->clips()->first()->acls()->first()->id)->toBe(Acl::PORTAL());
});

it('does not insert the same clip twice if a clip with an identifier already exists', function () {
    $event_identifier = Str::uuid();
    $this->mockHandler->append(
        $this->mockEventResponse($this->series, OpencastWorkflowState::SCHEDULED, 2, $event_identifier),
    );
    $this->signInRole(Role::SUPERADMIN);
    post(route('series.opencast.addScheduledEventsAsClips', $this->series), [
        'opencastSeriesID' => $this->series->opencast_series_id]);

    expect($this->series->clips->count())->toBe(1);

    $this->mockHandler->append(
        $this->mockEventResponse($this->series, OpencastWorkflowState::SCHEDULED, 2, $event_identifier),
    );
    post(route('series.opencast.addScheduledEventsAsClips', $this->series), [
        'opencastSeriesID' => $this->series->opencast_series_id]);

    expect($this->series->clips->count())->toBe(1);
});

it('validates themes options to update the video workflow', function () {
    $this->series->addMember(signInRole(ROLE::MODERATOR));
    $this->series->refresh();
    $this->mockHandler->append(
        $this->mockHealthResponse(), // health
        $this->mockSeriesMetadata($this->series),
        $this->mockgetSeriesTheme(), // Themes response
        $this->mockNoResultsResponse(), // recording
        $this->mockNoResultsResponse(), // running
        $this->mockNoResultsResponse(), // scheduled
        $this->mockNoResultsResponse(), // failed
        $this->mockNoTrimmingResultsResponse(), // trimming
        $this->mockEventResponse($this->series, OpencastWorkflowState::SCHEDULED), // upcoming
        $this->mockCreateSeriesResponse(),
    );

    put(route('series.opencast.updateSeriesTheme', $this->series), [])->assertSessionHasErrors(['faculty', 'position']);
});

it('denies to update series theme if a user has a role of student', function () {
    signInRole(ROLE::STUDENT);

    $this->mockHandler->append(
        $this->mockHealthResponse(), // health
        $this->mockSeriesMetadata($this->series),
        $this->mockgetSeriesTheme(), // Themes response
        $this->mockNoResultsResponse(), // recording
        $this->mockNoResultsResponse(), // running
        $this->mockNoResultsResponse(), // scheduled
        $this->mockNoResultsResponse(), // failed
        $this->mockNoTrimmingResultsResponse(), // trimming
        $this->mockEventResponse($this->series, OpencastWorkflowState::SCHEDULED), // upcoming
        $this->mockCreateSeriesResponse(),
    );

    put(route('series.opencast.updateSeriesTheme', $this->series), [
        'faculty' => 'Default Faculty',
        'position' => '100',
    ])
        ->assertForbidden();
});

it('can change the default theme for a series', function () {
    $this->series->addMember(signInRole(ROLE::MODERATOR));
    $this->series->refresh();
    $this->mockHandler->append(
        $this->mockHealthResponse(), // health
        $this->mockSeriesMetadata($this->series),
        $this->mockgetSeriesTheme(), // Themes response
        $this->mockNoResultsResponse(), // recording
        $this->mockNoResultsResponse(), // running
        $this->mockNoResultsResponse(), // scheduled
        $this->mockNoResultsResponse(), // failed
        $this->mockNoTrimmingResultsResponse(), // trimming
        $this->mockEventResponse($this->series, OpencastWorkflowState::SCHEDULED), // upcoming
        $this->mockCreateSeriesResponse(),
    );

    put(route('series.opencast.updateSeriesTheme', $this->series), [
        'faculty' => 'Default Faculty',
        'position' => '100',
    ])
        ->assertSessionHas(['flashMessage' => 'Video workflow updated successfully']);

});

it('records activity on series theme update', function () {
    $this->series->addMember(signInRole(ROLE::MODERATOR));
    $this->series->refresh();
    $this->mockHandler->append(
        $this->mockHealthResponse(), // health
        $this->mockSeriesMetadata($this->series),
        $this->mockgetSeriesTheme(), // Themes response
        $this->mockNoResultsResponse(), // recording
        $this->mockNoResultsResponse(), // running
        $this->mockNoResultsResponse(), // scheduled
        $this->mockNoResultsResponse(), // failed
        $this->mockNoTrimmingResultsResponse(), // trimming
        $this->mockEventResponse($this->series, OpencastWorkflowState::SCHEDULED), // upcoming
        $this->mockCreateSeriesResponse(),
    );

    put(route('series.opencast.updateSeriesTheme', $this->series), [
        'faculty' => 'Default Faculty',
        'position' => '100',
    ]);

    assertDatabaseHas('activities', [
        'content_type' => 'series',
        'object_id' => $this->series->id,
        'change_message' => 'Update Theme to : Default Faculty with ID:100',
    ]);
});
afterEach(function () {
    // TODO: Change the autogenerated stub
});
